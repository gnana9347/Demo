package org.example.com.k7it;

import org.w3c.dom.ls.LSOutput;

import javax.swing.text.html.Option;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class StreamApiTest {
    public static void main(String[] args) throws IOException {

        IntStream s1 =  IntStream.range(1,100);
        s1.forEach(System.out::println);

        List<String> list = Arrays.asList("vinnu","lucky","cherry","dhanya");

        list.stream().forEach(System.out::println);

       List<String> filterList =  list.stream().filter(v -> v.startsWith("v")).collect(Collectors.toList());

        System.out.println(filterList);

        list.stream().filter(v -> v.startsWith("v")).forEach(System.out::println);

        IntStream s2 =  IntStream.generate(() -> (int)Math.round((Math.random()*999))).limit(10);
        IntStream s3 =  IntStream.generate(() -> 9).limit(10);

        s2.forEach(System.out::println);
        s3.forEach(System.out::println);

        IntStream s4 = IntStream.iterate(1,i -> i+1).limit(10);
        s4.forEach(System.out::println);

        IntStream s5 =  IntStream.of(1,2,3,4,5,6,7,8,9,10);
        s5.forEach(System.out::println);

        System.out.println("odd numbers 1 to 100");
       IntStream s6 =  IntStream.rangeClosed(1,100).filter(v -> v%2 !=0);
       s6.forEach(System.out::println);

       Stream<String> s7 = Stream.of("vinnu","lucky","dhanya","cherry");
       Stream<String> modifiedS7 = s7.skip(1);
      Stream<String> uppgerCaseStream =  modifiedS7.map(v -> v.toUpperCase());
      uppgerCaseStream.forEach(System.out::println);

        Stream.of("vinnu","lucky","dhanya","cherry").skip(1).map(v->v.toUpperCase()).forEach(System.out::println);


       // s7.skip(1).map(v->v.length()).forEach(System.out::println);

        List<String> l1= Arrays.asList("vinnu","lucky","dhanya","cherry");
        l1.stream().skip(1).map(v->v.length()).forEach(System.out::println);
        l1.stream().forEach(System.out::println);

        l1.stream().skip(1).map(e -> e.substring(0,3)).sorted().forEach(System.out::println);
        long count =  l1.stream().skip(1).map(e -> e.substring(0,3)).sorted().count();
        System.out.println(count);

       Stream s8  =  l1.stream().filter(e -> {
            System.out.println("I am in stream filter method");
            return e.contains("v");
        });
        s8.forEach(System.out::println);

        List<String> list6 = Arrays.asList("abc1", "abc3", "abc2","xyz2");

        Optional<String> output = list6.stream().filter(element -> {
            System.out.println("filter() was called");
            return element.contains("2");
        }).map(element -> {
            System.out.println("map() was called");
            return element.toUpperCase();
        }).findFirst();
        System.out.println(output.get());

        System.out.println("for each with map");
        list6.stream().filter(element -> {
            System.out.println("filter() was called");
            return element.contains("2");
        }).map(element -> {
            System.out.println("map() was called");
            return element.toUpperCase();
        }).forEach(System.out::println);


       // 2nd way of creating stream obj using builder pattern

        Stream<String> s9 = Stream.<String>builder().add("lucky").add("vinnu").add("cherry").add("dhanya").build();

        s9.filter(e -> e.startsWith("v")).forEach(System.out::println);

        Stream<?> s10 = Stream.builder().add("lucky").add(123).add(10.25).add(true).build();
        s10.forEach(System.out::println);

        Stream s11 = Stream.builder().build();

        Stream<Object> s12 = Stream.builder().add(12).add("java").add("mongodb").add(true).build();

        s12.forEach(System.out::println);

        Path path = Paths.get("D:\\lab\\202401_JavaBatch\\JavaClass\\inputfiles\\sample.txt");
        Stream<String> fileLines = Files.lines(path);
        fileLines.forEach(System.out::println);

        File file = new File("D:\\lab\\202401_JavaBatch\\JavaClass\\inputfiles\\sample.txt");
        FileReader fr =  new FileReader(file);
        char fieldata[] = new char[100000];
        fr.read(fieldata);

        for(char c : fieldata){
            System.out.println(c);
        };

        BufferedReader br  = new BufferedReader(fr);

        Stream<String> lines =  br.lines();


        List<Integer> intList =  Arrays.asList(1,2,3,4,5,6,7);
        Stream<Integer> intStream = intList.stream().filter(v -> v%2==0);
        Stream<Integer> mapStream = intStream.map(e -> e == 2 ? 100:200);

        Set<Integer> mapList =  mapStream.collect(Collectors.toSet());

        System.out.println(mapList);


     //  Optional<Integer> optValue = intStream.findFirst();//
       // System.out.println(optValue.get());


        List<String> strList = Arrays.asList("java","mongodb","oracle","ajx","kafka");
       Map<String,Integer> map = strList.stream().collect(Collectors.toMap(e -> e, e -> e.length()));
       List<String> lstr = strList.stream().collect(Collectors.toList());
       Set<String> sstr = strList.stream().collect(Collectors.toSet());
       map.forEach((k,v) -> System.out.println(k+":"+v));









    }
}
