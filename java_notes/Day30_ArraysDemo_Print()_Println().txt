
public class ArraysDemo {
/*
  Arrays: Arrays are sequence of continues memory locations, by using arrays 
  we can store multiple values by using single variable name,
  by using index based insertion or retrieve data from arrays.
  
  for example if array variable pointing to 10 memory locations then our index is start from 
  0 and end with 9. normal count will start from 1 but index will start from zero(0). 
  so if we need to give the index for N memory location then our index will be 
  start with 0 and end with N-1.
     count :  1 to N
     index :  0 to N-1
     
     syntax : DataType[] variableName =  new DataType[size];
              or
              DataType variableName[] =  new DataType[size];
              or
              DataType []variableName =  new DataType[size];
              
     Note: Arrays can store multiple values with single datatype.
	 
     here 
     size: indicates no of elements or no of memory locations which we are reserve for
     this variable. 
     
     DataType: what type data we can able to store in that variable. 
      [] :  array symbol 
	  
     Example: 
       int a[] = new int[10];// this array variable can store 10 int values
       
       // here new int[10] means its not a object for int primitive data type 
	   it is object for java.lang.reflect.Array class, in that array class object
	   i can store only int type value max count is 10.
        
       String s[] = new String[20]; // by using this variable we can store 20 string values
       
       by using arrays we can able to store only one type data which is specific to specified
       data type in case of primitives 
       
       by using arrays we can able to store only same type of objects or sub class type
       objects in case of derived data types. but we can't store super class type objects.
               
               
       Person p[] = new Person[5]; // here in this array we can store 5 person or sub class of
       person class objects we can store.
       
       Note: in side arrays every memory location will initialize with corresponding data type
        default values. for example if array is int type array then all memory locations will 
        fill with zero. if array type is double then it will initialize with 0.0
        if array is derived type then it will initialize with null values by default.
        
        
        arrays will get default values if you declare any place either it can be global 
        variable or local variable or parameter / arguments variable 
        
        
       declaration and initialization of arrays :
       ==========================================
       
       declaration :
                   DataType variableName[];
				   
                   int i[];      //here i means: integer type array class variable
                   double d[];   // here d means : double type array class variable 
                   double d1;    // just simple double variable; 
                   int i1;       // it simple int varible
        
                   Person[] refvar; // this person type Array class variable. 
                   
       declaration and initalization:
       
            int i[] = new int[3];// left side part called declaration and right side part called
                                     as initialization. 
             this meaning is we are creating object for array class with reserving
             3 memory locations for storing int type values. 
             
             int i[];  // declaration
             
             i= new int[3];// just initialization;
             i[] = new int[3];// CTE error while initializing at different place 
			                // we no need to use [] for variable like this  i[],
							just use  only variable name  thats enough like i = value.
             
        how to insert the data and how to read data from arrays :
        ==========================================================
        
         if we want to insert data into array or if we want to read data from array 
         we should use the index of memory location along with variable name. index is
         start with zero and end with N-1; if index is leass than 0 or greater than N-1, then
         we will get the java.lang.ArrayIndexOutOfBoundExcpetion, it is a sub class of
         IndexOutOfBoundExcpetion.
         
         example ;
         int i[] = new int[3];// here array size is 3 so index is 0 to 2;
       
         i[0] = 10;
         i[1] = 20;
         i[2] = 60;
         i[3] = 70;//ArrayIndexOutOfBoundExcpetion
         i[-2] = 15; // ArrayIndexOutOfBoundExcpetion
         
         this code we want to achive without arrays in normal varaibale 
         int i = 10;
         int j =  20
         int k = 60;
         
         how to read values from arrays: 
         
         System.out.println(i[0]);// 10
         System.out.println(i[2]);// 60
         System.out.println(i[1]);// 20
         
         while inserting or reading data from arrays we can insert in any order or
         you read any order by using index, but index should be with in the range else
         we will get ArrayIndexOutOfBoundExcpetion.
         
         
         Person[] p = new Person[5];
         
         p[0] =  new Person(27,"K7iT",5.6,55.0);
         p[3] =  new Person(22,"java",5.2,65.0);
         p[4] =  new Person(32,"mongodb",5.5,65);
         
         
        Person  p1 =  new Person(27,"K7iT",5.6,55.0);
        Person  p2 =  new Person(22,"java",5.2,65.0);
        Person  p3 =  new Person(32,"mongodb",5.5,65);
        
         p[0] =  p1;
         p[3] =  p2;
         p[4] =  p4;
         
         Car c1 = new Car(001,"Xylo",12345);
         p[2] = c1; // CTE we can't assign car class objects inside person type array. 
                    // bzc there is no relationship between person and car classes.
                      
         how to find the no of elements in the array:
         ============================================
         
               length : by using length attribute we can able to find the no of elements 
                        in the array.
                        
         How many ways we can give the values or read the values from arrays:
         
         int[]a =  new int[5];
         // 1. Assigning literal way or using direct index 
         a[0] = 20;
         a[1] = 21;
         a[2] = 22;
         a[3] = 23;
         a[4] = 24
		 
		 sop(a[0]);
		 sop(a[1]);
		 sop(a[2]);
		 sop(a[3]);
		 sop(a[4]);
         
         2. assign using for loop:
         =========================
          int k = 20;
         for(int i = 0; i< a.length;i++){
            //a[i] =k++;  this called as post increment : first assign the vlaue what ever u have
        	                                              // then increase the value by adding 1
             a[i] =++k;    // this is called pre increment : first increament the value  by adding one
                                                           // then assign same value to left side variable
         
         }
          // how to read the values from arrays by using for loop
         for(int i = 0;i<a.length;i++) {
        	 System.out.println(a[i]);
         }
         
         how to read by using while loop:
         ===============================
         while loop: while loop also one of the looping block for executing same code 
         more than one time until condition will get false;
         systax: 
            while(condition){
             
               // body of the while which we need to execute multiple times 
            }
         here condition will except boolean true or false values expressions. 
		 if conditon is true while loop code will execute,
		 if condition is false then while code will not execute. 
         example:
		 
         int j = 0;
         while(j < a.length) {
        	 System.out.println(a[j]);
        	 j++;
         }
         
         do -while loop: 
         ===============
                          do whill loop works same as the while loop but there is 
                          one difference. i.e in while first we will check the condition 
                         
						  if condition is true then only while loop body will execute.
						 
                          in case condition is failed at first time only,
						  then while loop code will not execute even one time. 
                          
                          But incase of dowhile loop first we will execute the 
						  body of the loop then we will check condition if 
						  we want to execute same code again. here
                          					  
						  even though condition failed at first time also,
						  our doWhile loop  code will execute at lease one time. 
                          
                          syntax: 
                           
                            do{
                            // body of the loop which u want to execute multiple times 
                            }while(condition);
                            
                         example:
                         
                           int l = 0;
					        do {
					        	 System.out.println(a[l]);
					        	 l++;
					         }while(l < a.length);
					         
							 in case of do-while our array should have at least one value 
							 else we will get AIOOBE.
							 
			enhanced for loop:
			=================
			 		  it will works same as for loop but it will use internally 
			                   iterator features instead of index. 
			                   it is JDK 1.5 feature.
			          syntax:
			           for(InnerElement DataType ref : arry or collection obj){
			              // body of loop which u want to execute multiple times
			           }		  
		  
			          examples: 
			           
			           for(int value : a) {
			        	System.out.println(value);
			           }
        
        
        forEach for loop: 
        =================
        its is jadk 1.8 feature, it will also works like same as enhance 
        for loop but it is better than that. 
        
        syntax: 
        
          collection obj.forEach(value -> System.out.println(value));
         
         in side forEach for loop it wont use index or iterator feature it will works using
         lamda expression.
         
         this forEach forloop is using for collections obj mainly so we will see later.
         
         Types of arrays:
         ===============
         
         1. single dimension array : till now what are the arrays which we have seen  those are
            single dimensional arrays. 
         2. multi dimension array : the arrays which is declaring with more than one dimension 
          those are called as multi dimension arrays like 2 dimensional arrays or 3 dimensional
          etc...
          
          multi dimension arrays also called as array inside another array is called as multi
          Dimension array. 
		  
		  example if we take 2 dimension array 4*4 size 
		  =============================================
          
          	0	  1    2    3
        
        0   1     2    3    4
        
        1   5     6    7    8
        
        2   9     10   11  12
        
        3   13    14   15  16
        
        
        Arrays utility class:  there is a  class with the name of Arrays under java.util package 
        only.
        it will provide all array Utility methods like sorting , converting array to List
        list to array etc.
        
         int a[] = new int[5];// Array class 
         a[0] = 20;
         a[1] = 15;
         a[2] = 40;
         a[3] = 25;
         a[4] = 10;
         
         for(int value : a) {
        	 System.out.println(value);
         }
         // how to sort the elements in the arrays:
         Arrays.sort(a);// by default it will sorting element in asending order 
        System.out.println("after sort");
         for(int value : a) {
        	 System.out.println(value); // 10,15,20,25,40
         }
        
	   Arrays.sort(a, Comparator.reverseOrder()); sorting elements in the reverse order or desending order 
		System.out.println("after sort");
         for(int value : a) {
        	 System.out.println(value); // 40,25,20,15,10
         }
        
        
        what are the limitations in the arrays: 
        1. by using arrays we can able to store only one data type values. we can't store
           different data type values inside one array.
        2. Array size fixed , once you fix the array size   it wont increase automatically.
         
        in order to fix this issues in arrays java people came up with new concept with 
        name of collections.
        
        
        int i[]= new int[3];
		i[0]= 10;
		i[1]= 20;
		i[2]= 30;
		//i[4] =  40;// AIOOBE
		sop(i.length);// 3
		// now my requirement changed to store 6 values 
		// re initalization with new size by creating new object 
		i = new int[6];
		sop(i.length);// 6
		
		sop(i[0]);// 0 
		// if we want to old values as it is and we need extra size 
		 // then take one temp array with new size 
		 // then dupm old values into temp array 
		 // then re initalization old array with temp array 
		 // then make temp array as null 
		 
		 int temp[] = new int[6];
		   temp[0] = i[0];
		   temp[1] = i[1];
		   temp[2] = i[2];
		   or 
		  for(int j = 0;j<i.length;j++){
		     temp[j] =  i[j];
		  }
		
		  i = temp;
		  
		  temp = null;
		  sop(i[0]);// 10
		  sop(i[5]);// 0
         
        
  
 */
	public static void main(String[] args) throws InterruptedException {
		//int[]i =  new int[5];
		/*char []c =  new char[10];
		//System.out.println(i.length);
		System.out.println(c.length);
		System.out.println(":"+c[0]+":");
		 int[]a =  new int[2000];
		 int k = 20;
		 // how to assign the values  by using for loop
         for(int i = 0; i< a.length;i++){
             //a[i] =k++;  this called as post increment : first assign the vlaue what ever u have
        	                                              // then increase the value by adding 1
             a[i] =++k;    // this is called pre increment : first increament the value  by adding one
                                                           // then assign same value to left side variable
         }*/
          // how to read the values from arrays by using for loop
      /*   for(int i = 0;i<a.length;i++) {
        	 System.out.println(a[i]);
         }
         int j = 0;
         while(j < a.length) {
        	 System.out.println(a[j]);
        	 j++;
         }
         
        int l = 0;
        do {
        	 System.out.println(a[l]);
        	 l++;
         }while(l < a.length);
		*/ 
       /* for(int value : a) {
        	System.out.println(value);
        	//Thread.sleep(1000);
        }
        
        *
        *
        *
        	0	  1    2    3
        
        0   1     2    3    4
        
        1   5     6    7    8
        
        2   9     10   11  12
        
        3   13    14   15  16
        */
         /*printing left and right diagnals
         int ar[][] =  new int[4][4];
         int v =1;
         for(int i=0;i<4;i++) {
        	 for(int j =0;j<4;j++) {
        		 ar[i][j] = v++;
        	 }
         }
         
         for(int i=0;i<4;i++) {
        	 
        	 for(int j =0;j<4;j++) {
        		 if(i == j) {
        			 System.out.print(ar[i][j]);
        		 }else {
        			 System.out.print(" ");
        		 }
        	 }
        	 System.out.print("\n");
         }
         int size = 4;
         for(int i=0;i<size;i++) {
        	 
        	 for(int j =0;j<size;j++) {
        		 if(i+j == size-1) {
        			 System.out.print(ar[i][j]);
        		 }else {
        			 System.out.print(" ");
        		 }
        	 }
        	 System.out.print("\n");
         }
         
         */
		
		
         
         int a[] = new int[5];
         a[0] = 20;
         a[1] = 15;
         a[2] = 40;
         a[3] = 25;
         a[4] = 10;
         
         for(int value : a) {
        	 System.out.println(value);
         }
         // how to sort the elements in the arrays:
         Arrays.sort(a);// by default it will sorting element in asending order 
        // Arrays.sort(a, Comparator.reverseOrder()); sorting elements in the reverse order 
        System.out.println("after sort");
         for(int value : a) {
        	 System.out.println(value);
         }
        
        
         
        
        
        
        
        
	}
}


examples 2:
============
package com.k7it;

public class ArrayDemo {

	public static void main(String[] args) {

		int i1[] = new int[5];
		System.out.println(i1.length);// 5
		System.out.println(i1[0]);

		char c[] = new char[10];
		System.out.println(c.length);
		System.out.println("'" + c[0] + "'");// ' ' // single empty space

		// java code for 2 dimensional array reading and writing operation i.e 4*4
		// metrics u can consider

		int a[][] = new int[4][4];
		int m = 4;// row size first array size
		int n = 4;// column size , 2nd array size
		// insert
		int v = 20;
		for (int i = 0; i < m; i++) {

			for (int j = 0; j < n; j++) { // {(0,0), (0,1),(0,2),(0,3)}, {(1,0), (1,1),(1,2),(1,3)},{(2,0),
											// (2,1),(2,2),(2,3)},{(3,0), (3,1),(3,2),(3,3)}
				a[i][j] = v++;
			}
		}

		// reading values
		for (int i = 0; i < m; i++) {

			for (int j = 0; j < n; j++) { // {(0,0), (0,1),(0,2),(0,3)}, {(1,0), (1,1),(1,2),(1,3)},{(2,0),
											// (2,1),(2,2),(2,3)},{(3,0), (3,1),(3,2),(3,3)}
				System.out.println(a[i][j]); // here we will get output 20 to 35 in separate lines , but i want output
												// as matrix format\
			}
		}
		/*
		 * output :20 
		 * 21 
		 * 22 
		 * 23 
		 * 24 
		 * 25 
		 * 26 
		 * 27 
		 * 28 
		 * 29 
		 * 30 
		 * 31 
		 * 32 
		 * 33 
		 * 34 
		 * 35
		 * 
		 * to print our output as matrix format ,
		 * 1. print one row values in one line  i.e 4 values need to print in one line 
		 * 2. go to next line for new row values 
		 */
/*
 
     here some thing more about print method: 
     ========================================
      in java we have different types of print methods 
      1. print(): this method will print the given value in same line even if use 100 times of this method 
      2. println(): this method will print the given value into console and it make cursor go to next line 
                      print + go to new line / here ln means new line 
                      in java there is some special chars to achieve some special functionality 
                      new line operator : \n  -> when ever we execute \n inside sop it will bring cursor to new line.
                      tab operator : \t  -> when ever we execute \t inside sop it will make one tab empty space within the same line .
                      here \(back slash): means escape character , after escape char if u keep any char , that char should have some special meaning else we will get CTE. 
                       suppose: if we want to print back slash as output in console : then we should use double back slash i.e "\\"
                       
                        sop("\\hello");// \hello
                        sop("\hello"); // CTE for char h we don't special meaning 
                        
                        suppose: if we want to use double quote as output inside console : "Hello Kesav"
                        
                        sop("Hello Kesav");// Hello Kesav 
                        sop("" Hello Kesav "");// CTE 
                        
                        // if we want to use double quote as a normal char then we should use back slash before double quote.
                          sop("\"Hello Kesav\""); // "Hello Kesav"
                        
                         println() = print()+ \n 
                         
                         System.out.print("Hello\n");// Hello + go to newline
                         System.out.print("Kesav\n");// kesav + go to new line 
                         
                         System.out.println("Hello");// Hello + go to newline
                         System.out.println("Kesav");// kesav + go to new line 
                         
                         
                         
                        
                      
                      
      3. printf() : printformat: format the print values as per our requirement \d, %f, %d,%s
  
 */
		
		 System.out.println("printing values in matrix format");
		 
		// reading values
			for (int i = 0; i < m; i++) {

				for (int j = 0; j < n; j++) { // {(0,0), (0,1),(0,2),(0,3)}, 
					                          //{(1,0), (1,1),(1,2),(1,3)},
					                          //{(2,0),(2,1),(2,2),(2,3)},
					                          // {(3,0), (3,1),(3,2),(3,3)}
					System.out.print(a[i][j]+" "); // here we will get output 20 to 35 in separate lines , but i want output
													// as matrix format\
				}
				
				System.out.print("\n");
			}
	}
}
