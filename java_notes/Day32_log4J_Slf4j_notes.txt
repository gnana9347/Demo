 
  to under stand the execution flow and runtime values or runtime errors we need to system logs or project
  logs . by default these logs we can achieve by using SOP statements. 
  
  But using of system.out.println is not advisable in our project, why bzc while developing the application
  developer may need multiple logs to understand the application status. once the application went to production
  they don't need these many logs.  because if we need to print more logs means we need execute more sop statemts
  so number of lines of code will increase and also JRE time will waste. 
  
  if we want to avoid or if we need to achieve better performance we need to remove or comment the unwanted 
  sop stmts, 
  
  how to remove sop stamte:
  =======================
  -> this is also very big problem for developer to identify the sop stmts and removing it.
  -> once we remove the stmts then again we need to recompile programs and redeploy.
  -> so it will take lot of time 
  
  to fix this all these sop stmts drawbacks apache people came up with one frame work called log4j
  
  Log4J: Log4j is apache framework , it is a open source frame work, 
  it is using for application logging purpose with different types of scopes. 
   like 
     
     1.debug
     2.info
     3.error
     4.fatal
     5. ALL
     
     1. download log4j jar file from apache web site or maven dependency files
     	https://mvnrepository.com/artifact/log4j/log4j/1.2.17
     
     2. copy this jar file where we need use it 
         D:\lab\log4j\log4j-1.2.17.jar
     3. go to eclipse  include this log4j jar file into our project.
     
          my project-> rt click -> properties -> build path-> libraries -> add external jars -> select our log4j
          jar file -> apply -> apply and close
		  
		  if we are using maven project just add the maven dependency details in pom.xml
				  
		<!-- https://mvnrepository.com/artifact/log4j/log4j -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>



     4.   to control our log4j loggers we need one properties files i.e log4j.properties
           
		   java project: 
		   1. create one resource folder inside that create log4j.peoperties file.
           inside log4j.properties file keep this code:
           
            # Root logger option  
			log4j.rootLogger=DEBUG, file, stdout  
			  
			# Direct log messages to a log file  
			log4j.appender.file=org.apache.log4j.RollingFileAppender  
			log4j.appender.file.File=d:\\lab\\logs\\logging.log  
			log4j.appender.file.MaxFileSize=10MB  
			log4j.appender.file.MaxBackupIndex=10  
			log4j.appender.file.layout=org.apache.log4j.PatternLayout  
			log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n  
			   
			# Direct log messages to stdout  
			log4j.appender.stdout=org.apache.log4j.ConsoleAppender  
			log4j.appender.stdout.Target=System.out  
			log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  
			log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n  
           
          in log4j we have 2 types appender and 1 main rootloger
          
            1. file appender : file : org.apache.log4j.RollingFileAppender 
            2. console appender : stdout : org.apache.log4j.ConsoleAppender
            
			maven project: add direct log4j.properties file under existing resource folder 
             then add the above config information.
     
        rootLogger : is a main controller pointing for log4j, by using this we can configure loggers level 
        (i.e debug,info,error,fatal) and appender types (i.e file or stdout).
  
        		log4j.rootLogger=info,stdout    this meaning we need to print only the logs which equal or above
        		                                info log level into a system console. 
        		                                
        		log4j.rootLogger=DEBUG, file, stdout   : it will print all logs which equal to debug or higher level
        		into 2 appenders 1. system console and file system as well.  
        		
        5. create object for Logger class by using Logger.getLogger		 
        
                                     
                                      debug: this is for developer information printing purpose for under code
                                      info : this for printing the production logs to understand the application
                                             execution flow . 
                                      error : this is printing only when we will get the exceptions or errors in
                                      our code , this error() we will use mainly inside catch block .
                                      
                                      fatal: also using to print the any critical abnormal conditions related 
                                      information.
                                      
  
 */
public class PersonManager {
	 
	private static Logger log = Logger.getLogger(PersonManager.class);

	public static void main(String[] args) {
		
	//	System.out.println("Main start");
	//	System.out.println("Creating person obj");
		
		log.debug("Main start");
		log.info("Creating person obj");
		
		Person person = new Person(27, 5.7, 50.35); 
		log.info("calculating the person Runrate:");
		
		double runRate = person.getRunRate();
		log.info("Persson Runate:"+runRate);
		try {
			int i  = 1/0;
		}catch (ArithmeticException e) {
            log.error(e);

		}
		
	//	System.out.println("Main end");
	}

}


if we dont want to use external log4j dependency inside our spring boot projectwe can 
use spring internal log4j dependency i.e Slf4j : this is default libraries from spring
we dont need to add any extra dependency in pom.xml file to use @Slf4j. 

which class we need use Slf4j in that class top we should add one annotation i.e 
@Slf4j
 and use the log.info() or log.debug() or log.error() methods directly inside our class 
 where ever u need, here alos we dont need to create object for log variable like log4j 
 
 private static Logger log = Logger.getLogger(Person.class);// this statement not required.
 
 and also to control @Slf4j scopes we no need create seperate properties file like 
 log4j.properties , we can our @Slf4j config information inside application.properties 
 file it self like bellow:
 
 application.properties 
 ===========================
 
# Set the root logging level
logging.level.root=INFO

# Set the logging level for a specific package
logging.level.com.example=DEBUG

# Set the logging level for a specific class
logging.level.com.example.MyClass=WARN


Note: from application.properties file we can control only scope of @Slf4j , but 
if we need add file appendders for @Slf4j we need to use additional xml file under 
resource folder only .

logback-spring.xml
=======================

<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- Console Appender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- File Appender -->
    <appender name="FILE" class="ch.qos.logback.core.FileAppender">
        <file>logs/app.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- Root Logger -->
    <root level="DEBUG"> 
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE" />
    </root>
</configuration>





 
 code comments:
 ==============
 java : 
 // -> single line
 /*     multiple line
 */
 
 .properties:
 # : single line comment
 
 xml:
 <!--   --> : single or multiple line comment
 
 
 